[["index.html", "Network Visualization Overview 0.1 Description 0.2 Learning goals 0.3 Prerequisites", " Network Visualization Liza Wood 2023-04-30 Overview 0.1 Description Network science approaches are being increasingly used to explore complex interactions and the general connectivity among entities, from friends in a social network to the spread of a disease in a population. Due its complexity, network data is often explored and communicated using data visualizations. In this intermediate R workshop we will cover how to tell useful stories with network data primarily using the statnet suite of packages and the ggraph plotting package that is compatible with much of the ggplot2 framework. In this interactive and hands-on workshop we’ll practice using these packages in R to plot one-mode and two-mode networks. As we introduce functions unique to these packages we will discuss what visualization features best suit different types of network data and research communication goals. Along the way we will cover basic data preparation steps and how to calculate (or assign) key network descriptives including centrality measures, edge attributes, and community clusters for your plots. 0.2 Learning goals After completing this workshop, learners should be able to: Distinguish between igraph and network objects in R Identify the necessary components for visualizing network objects in ggraph Calculate network and node-level descriptives and integrate them into visualizations Select among various visualization strategies for diverse communication goals Create well-designed network figures Identify where to go to learn more 0.3 Prerequisites The target audience for this workshop is intermediate to advanced R users. This workshop will provide only a cursory introduction to network data and therefore is best suited for learners who have some familiarity working with networks and working with ggplot2. While workshop data will rely on social scientific examples (e.g., social connections and co-occurrence networks), the lessons learned relating to network visualizations can be applied to a wide variety of research questions and learners from all domains are welcome. "],["introduction.html", "1 Introduction 1.1 What are network data? 1.2 Storing network data", " 1 Introduction 1.1 What are network data? Networks are relational data, whereby entities across all types of domains (actors, companies, species, topics, etc.) are connected based on one or more types of relationships (friendship, trade, pollination, in-text co-occurrence, etc.) Networks are useful for studying interdependencies because their structure suggest that entities and their connections inter-relate. Network analytical approaches typically evaluate questions these interdependencies from two perspectives. One is that of selection, whereby an actors choose to make connections based on certain characteristics/decision criteria. For example, a bee may choose to pollinate a certain flower based on its size or scent. A second perspective is that of influence, whereby connections are affecting the characteristics/decisions of actors. For example, being friends with someone who smokes may cause the non-smoker to take up smoking. 1.1.1 Features of a network Networks are composed of ‘nodes’, the data points that represent an entity (also called vertex), and ‘edges’, representing the relationship between the nodes. These network structures are represented in Figure 1. Figure 1.1: Components of a network Network ‘mode’: Networks can take several forms with variation in what kinds of connections can occur. One important distinction can be made between one-mode and two-mode networks. One-mode networks assumes that the nodes are all capable of making connections while two-mode networks assume that nodes of one type can only have relationships to nodes of a different type. Using the example of board members and corporations, Jasny (2012)1 explains: ‘Ties between the board members themselves (e.g., friendship ties) would constitute a one-mode network. Ties between companies (e.g., if the first company supplied the second with raw materials) would also be a one-mode network. The two-mode network is formed by ties from the board members, the first mode, to the boards of companies they sit on, the second mode.’ These two-mode networks, also called bipartite networks, assume that connections cannot be made within each mode (e.g. directly between companies’ boards). Figure 1.2: Two types of networks Node attributes: In both one and two mode networks, nodes have attributes. Node attributes are associated data that describe the entity, which can be either endogenous to the network (i.e. a characteristic of the node based on their place in the network) or exogenous (i.e. a characteristic of the node unrelated to their place in the network). Examples of endogenous node attributes are features of the node in relation to the network, such as their degree centrality. Examples of exogenous node attributes could be the gender of an individual, the sector a company works in, the weight or species of a pollinator, or the author of a word’s corpus. Directionality: The ties that connect entities in a network can be directed or undirected. Directed networks assume that there is a ‘sender’ and ‘receiver’ of an edge, and that the difference between these two matter (e.g. transmitting a disease). On the other hand, undirected networks assume that the connection is based on a mutual relationship (e.g. co-authorship). Whether or not edges are directed will alter our understanding of the network structure, since each connection-based statistic will be divided into incoming and outgoing connections. Figure 1.3: Network directionality Edge attributes: Just like with nodes, edges can also have attributes. Edge attributes can be endogenous to the network, such as the ‘weight’ of the tie (multiple connections) and/or exogenous, such as the type of connection. For example, individuals in a network can be connected through different relationships (e.g. classmates, friends), companies can trade information and/or material goods; pollinators can visit or pollinate. Depending on how a researcher wants to analyze a network, these various types of connections can be considered to exist across multiple ‘levels’. 1.1.2 Network statistics Summaries of networks are usually described at two levels: the network-level and the actor-level. We define a few below to standardize some of the terminology used in this workshop. Network-level statistics Size: Number of nodes and/or number of connections Density: Number of edges out of all possible edges Centralization: Propensity for nodes to connect to few or many nodes; closely related to degree distribution Transitivity/clustering coefficient (global): The ratio of the count of triangles and connected triples in the graph (e.g. propensity for ‘triadic closure’ across a whole network) Actor-level Several types of centrality, which is a measure of an actors’ connectedness based on… Degree: The number of connections an actors has Betweeness: The number of shortest paths Eigenvector: The influence based on connections and the propensity of their connections to have connections Transitivity/clustering coefficient (local): The ratio of the count of triangles connected to the vertex and the triples centered on the vertex (e.g. how dense the ‘neighborhood’ of an actor is) 1.2 Storing network data Network data, which record the relationships (edges) between nodes, are typically stored in one of two ways: edge lists or matrices. Edge lists are columns of data, whereby the positioning of two nodes next to one another in a column indicates a connection. In a one-mode undirected network, the position of names in the columns have little meaning (A -&gt; B = B &lt;- A). In a one-mode directed network, however, the columns take on a meaning, where the first column is a list of names from which a connection originated (e.g. ‘from’, also called ‘ego’), and the second column is a list of names to whom the connection is made (e.g. ‘to’, also called ‘alter’). In these cases, A -&gt; B != B -&gt; A. In two-made networks, where nodes of mode 1 can only connect to nodes of mode 2, but not one another, each column will represent a mode and nodes listed in one column cannot be in the other. Table 1.1: One-mode edge list ego alter A B B B C H D E E G F C G H H J I A J F Table 1.1: Two-mode edge list mode1 mode2 A O B K C K D M E L F L G O H N I N J K Matrices are the graph form for storing relational data. Nodes are listed as the rows and columns, and if two nodes are connected, a value is put into the matrix where they intersect. If two nodes do not have a connection, the value at their intersection is zero. The differences we pointed out in edge lists (directed/undirected, one-mode/two-mode) are reflected in the shape and symmetry of the matrix. One-mode undirected networks are square (i.e. the same nodes are represented in both the rows and columns) and symmetrical (i.e. the values across the diagonal are the same). In one-mode directed networks, the matrix is still square but the matrix is asymmetric: because it may be that nodeA -&gt; nodeB, inputting a value of 1 in row 1 and column 2, but if nodeB !-&gt; nodeA, there is a value of 0 in row 2 and column 1. In a two-mode network the matrix is likely rectangular, where mode one nodes are represented in the rows and mode two nodes are represented in the columns. Typically, two mode networks are not directed. Table 1.2: Undirected one-mode adjacency matrix A B C D E F G H I J A 0 1 0 0 0 0 0 0 0 0 B 0 0 1 0 0 0 0 0 0 0 C 0 0 0 0 0 0 0 1 0 0 D 0 0 0 0 1 0 0 0 0 0 E 0 0 0 0 0 0 1 0 0 0 F 0 0 1 0 0 0 0 0 0 0 G 0 0 0 0 0 0 0 1 0 0 H 0 0 0 0 0 0 0 0 0 1 I 1 0 0 0 0 0 0 0 0 0 J 0 0 0 0 0 1 0 0 0 0 Table 1.2: Undirected two-mode adjacency matrix O K M L N A 1 0 0 0 0 B 0 1 0 0 0 C 0 1 0 0 0 D 0 0 1 0 0 E 0 0 0 1 0 F 0 0 0 1 0 G 1 0 0 0 0 H 0 0 0 0 1 I 0 0 0 0 1 J 0 1 0 0 0 Jasny, Lorien. “Baseline Models for Two-Mode Social Network Data.” Policy Studies Journal 40, no. 3 (2012): 458–91. https://doi.org/10.1111/j.1541-0072.2012.00461.x.↩︎ "],["data.html", "2 Data 2.1 Delta Science Tracker 2.2 Data descriptions 2.3 Guiding questions", " 2 Data 2.1 Delta Science Tracker This workshop uses publicly available data from the Delta Stewardship Council’s (DSC) Delta Science Tracker. This database is a library of Sacramento and San Joaquin Delta-related research over the last 50 years. As the DSC’s website explains: “The Delta Science Tracker is a tool to improve coordination and collaboration of science activities in a way that is valuable to scientists, decision-makers, and managers in the Delta. The Delta Science Tracker allows users to explore and visualize recent research and monitoring efforts through the lenses of science activities, organizations, and people. It is intended to promote communication, create opportunities for collaboration, and enhance transparency for science funding opportunities and decisions.” The data we’re using was downloaded from the DSC’s visualizations page, with the ‘collaborations by’ filter set to organizations. Additional data were obtained through scraping their webpage, which we did with permission from the DSC. Code for scraping their webpage can be found here. Figure 2.1: Miles Hermann 2.2 Data descriptions Before getting started with visualizations, we want to take a look at the data we have available. Typical questions you should be able to answer before getting started are as follows: What types of nodes do we have and how are they related? What node and/or edge attributes are available? Are the network data one or two mode? Directed or undirected? Let’s take a look at what we have. Two-mode edge list: The DSC data was originally compiled as two-mode network data, describing how organizations/researchers are connected to research projects. In these data, our first mode, org_id, is the organization(s) (agencies, universities, etc) that are working on projects in the Delta. And our second mode, project_id, are the Delta science research projects themselves. This two-mode edge list has 680 rows, whereby 138 organizations are connected with one or more of 297 projects. In these data, organizations often take part in more than one project, and projects often have more than one organizations associated with it. We also have edge attributes, which represent the kind of involvement an organization has in the project: contributor or leader. edges_2mode &lt;- read.csv(&#39;https://raw.githubusercontent.com/ucdavisdatalab/workshop_network_viz/main/data/edgelist_twomode.csv&#39;) dim(edges_2mode) ## [1] 680 4 head(edges_2mode) ## org_id project_id contribution leadership ## 1 49590 50122 TRUE FALSE ## 2 49592 49780 TRUE FALSE ## 3 49592 49865 TRUE FALSE ## 4 49594 49860 TRUE FALSE ## 5 49598 50091 TRUE FALSE ## 6 49600 50170 TRUE FALSE Node list for two-mode network: We also have a list of all the nodes (organizations and projects), each of which has different attributes. We have more node attributes for project nodes than we do for organization nodes, so many of the attributes for organizations are empty. For projects, we have funding data, the dates of the project, as well as a series of categorical tags related to what kinds of scientific and management themes the project addresses. A sample of those are displayed below: nodes_2mode &lt;- read.csv(&#39;https://raw.githubusercontent.com/ucdavisdatalab/workshop_network_viz/main/data/nodelist_twomode.csv&#39;) head(nodes_2mode[,c(1,4,6,16,31,39)]) ## id funds startdate sci_Channelizedhabitats sci_Amphibiansandreptiles ## 1 50122 $0 2008 FALSE FALSE ## 2 49780 $0 2020 FALSE FALSE ## 3 49865 $445,921 2019 FALSE FALSE ## 4 49860 $931,104 2019 FALSE FALSE ## 5 50091 $0 NA FALSE FALSE ## 6 50170 $0 NA FALSE FALSE ## mgmt_Governance ## 1 FALSE ## 2 FALSE ## 3 FALSE ## 4 FALSE ## 5 FALSE ## 6 FALSE Note that the scientific and management themes are formatted as logical values for each theme. This is because projects can have more than one theme, and so listing them out would cause our data to be ‘long’ with repeated project observations. With node lists, we want to only have unique observations. If your data are ‘long’ (with repeating observations), widen them out as we did with the scientific and management themes. One-mode edge list: We projected our two-mode network to a one-mode network to take a deeper look at research collaborations. Projection of two-mode data into one-mode is a common practice, though it has its limitations (Jasny 2012). By converting two-mode into one-mode data, we can take a look at what organizations are working together on projects. Looking at the dimensions of our data, we have 475 collaborative ties in the network. We’ve also added in an edge attribute to our collaboration tie based on the years that different actors collaborated together. Reveal below for more on how to project one-mode data from two-mode data. edges_1mode &lt;- read.csv(&#39;https://raw.githubusercontent.com/ucdavisdatalab/workshop_network_viz/main/data/edgelist_onemode_projected.csv&#39;) dim(edges_1mode) ## [1] 475 6 head(edges_1mode) ## from_org_id to_org_id Y1995_2009 Y2010_2024 before_1980 Y1980_1994 ## 1 49590 49709 TRUE FALSE FALSE FALSE ## 2 49592 49708 FALSE TRUE FALSE FALSE ## 3 49592 49741 FALSE TRUE FALSE FALSE ## 4 49592 49609 FALSE TRUE FALSE FALSE ## 5 49708 49741 FALSE TRUE FALSE FALSE ## 6 49609 49708 FALSE TRUE FALSE FALSE Reveal: How to project one-mode networks from two-mode edge list # We got our projected data directly from the DST webpage, but generally, # you can project any bipartite network into a one-mode network using the # following steps: # 1. Create count table where organizations are columns (make your mode of # interest the 2nd/y argument in the table) tbl &lt;- table(edges_2mode[c(2,1)]) # 2. Extract column names -- these are mode 1 names (in our case, orgs) orgids &lt;- colnames(tbl) # 3. Take the cross-product of the table to get a co-occurence matrix comat &lt;- crossprod(tbl) # 4. Assign self-co-occurrences 0 diag(comat) &lt;- 0 # Check: This should be symmetrical isSymmetric(comat) # 5. Make a data frame from the matrix and add ids as the column names comat &lt;- data.frame(comat) colnames(comat) &lt;- orgids #. Check: This should be square dim(comat) # 6. Remove those with no co-occurrence at all comat &lt;- comat[rowSums(comat, na.rm = T) != 0, colSums(comat, na.rm = T) != 0] # 7. Make co-occur data frame into matrix object comat &lt;- as.matrix(comat) # 8. Create a graph so that it can be converted into a weighted edge list g &lt;- igraph::graph_from_adjacency_matrix(comat, weighted = T, mode = &#39;undirected&#39;) el_proj &lt;- igraph::get.data.frame(g) Node list for one-mode network: We reduced our two-mode node list down to only a list of our organization nodes, which is what we project in our one-mode network. For organizations, we have very few attributes, only their id, name, and link to their DST page. nodes_1mode &lt;- read.csv(&#39;https://raw.githubusercontent.com/ucdavisdatalab/workshop_network_viz/main/data/nodelist_onemode.csv&#39;) head(nodes_1mode[1:2]) ## id name ## 1 49590 Agricultural Coalitions: Landowners membership fees ## 2 49592 Anchor QEA ## 3 49593 Audubon Canyon Ranch ## 4 49594 Bachand and Associates ## 5 49598 BTS ## 6 49600 CalFish 2.3 Guiding questions As with any visualization, we need to have an idea of what stories we want to tell / what questions we want to answer. With networks, there are limits to how much you can ‘explore’ through visualization alone, and so throughout these plotting exercises having guiding questions can keep us focused on what is important as we navigate the wide array of visualization options. 2.3.1 One-mode visualization: What is the structure of the collaborative research network in the Delta? How have the Delta’s research collaborations changed over time? 2.3.2 Two-mode visualization: Across the Delta science projects, what organizations have been most active? How do organizations’ activity differ across different scientific and management themes: climate, land use, governance, and flooding? "],["creating-network-objects-in-r.html", "3 Creating network objects in R 3.1 igraph 3.2 network", " 3 Creating network objects in R Now that we have our edge lists and node lists, we want to create our network objects. There are two popular network packages (and consequently, network object types) in R. igraph generates a list object of class “igraph” and network generates an list object of class “network”. We are going to be working primarily with network objects, but I’d like to start by making both because you are likely to run into both of them along the way, and both are compatible with the ggraph package that we will be using. So, let’s read in our two network packages, as well as a couple other packages that we’ll need for this workshop. library(igraph) library(network) 3.1 igraph First, let’s make an igraph object. igraph generally seems to have more documentation/Stack Overflow resources than other network packages, so it might be tempting to start here. We can load in the igraph package and use the graph_from_data_frame() function to create our graph. Note that there are dozens of graph_from... functions. Many of them sound (and are) intuitive. When dealing with edge and node lists, I prefer graph_from_data_frame() over graph_from_edgelist() because the former allows us to include the node list as an argument, whereas the latter does not. We want to start with creating both our one and two-mode networks. For our one-mode networks we want to use the edges_1mode and nodes_1mode objects. g1 &lt;- graph_from_data_frame(edges_1mode, vertices = nodes_1mode, directed = F) We can take a look at a summary of the igraph object below. We see the number of nodes (139) and edges (475) summarized at top and our list of node attributes (followed by (v/[datatype])) and edges attributes (followed by (e/[datatype])). summary(g1) ## IGRAPH 66a5915 UN-- 139 475 -- ## + attr: name (v/c), url (v/c), mode (v/n), Y1995_2009 (e/l), Y2010_2024 ## | (e/l), before_1980 (e/l), Y1980_1994 (e/l) Two-mode networks are a bit harder to create in igraph. Generally this package has very little two-mode functionality. There is one function for this, make_bipartite_graph(), but it requires different inputs than the standard edge list or matrix, and node lists. Instead, this function requires a vector of vertex types, meaning a Boolean of modes (0-1), and a vector of the edges in the graph. ?make_bipartite_graph() We won’t walk through the steps on how to do this, but you can reveal the steps below if you want to know more. Reveal: How to make a two-mode network from edge list and node list in igraph # edges need to be a as a vector where each pair is a connection, # so we can vectorize the edge list (e.g. convert the connection between: # id 49590 and id 50122 be just paired together as our first two values # in the vector, and so on edges_2mode_v &lt;- as.vector(matrix(rbind(edges_2mode$org_id, edges_2mode$project_id),ncol=1)) # But edges ALSO need to be numbered in a way that is compatible with the nodelist nodes_2mode$id_numeric &lt;- 1:nrow(nodes_2mode) # So now we can reassign the edge list library(dplyr) library(magrittr) edges_2mode &lt;- left_join(edges_2mode, select(nodes_2mode, id, id_numeric), by = c(&#39;org_id&#39; = &#39;id&#39;)) %&gt;% rename(&#39;org_id_numeric&#39; = &#39;id_numeric&#39;) %&gt;% left_join(select(nodes_2mode, id, id_numeric), by = c(&#39;project_id&#39; = &#39;id&#39;)) %&gt;% rename(&#39;project_id_numeric&#39; = &#39;id_numeric&#39;) # And re-make this vector edges_2mode_v &lt;- as.vector(matrix(rbind(edges_2mode$org_id_numeric, edges_2mode$project_id_numeric),ncol=1)) # Now we can make the two mode network in igraph g2 &lt;- make_bipartite_graph(nodes_2mode$mode, edges_2mode_v, directed = FALSE) # And we have to manually assign attributes g2 &lt;- set_vertex_attr(g2, &quot;id&quot;, value = nodes_2mode$id) g2 &lt;- set_vertex_attr(g2, &quot;n_years&quot;, value = nodes_2mode$n_years) g2 &lt;- set_edge_attr(g2, &#39;leadership&#39;, value = edges_2mode$leadership) g2 &lt;- set_edge_attr(g2, &#39;contribution&#39;, value = edges_2mode$contribution) The syntax for manipulating igraphs is demonstrated below. We use the V() and E() functions to call on either vertices or edges of our igraph, respective. hen can use the $ symbol to subset from those elements of the network. # Subset the vertex attribute: the names of the vertices head(V(g1)$name) ## [1] &quot;Agricultural Coalitions: Landowners membership fees&quot; ## [2] &quot;Anchor QEA&quot; ## [3] &quot;Audubon Canyon Ranch&quot; ## [4] &quot;Bachand and Associates&quot; ## [5] &quot;BTS&quot; ## [6] &quot;CalFish&quot; # Subset the edge attribute: a logical value for whether a collaboration # happened between 1995-2009 head(E(g1)$Y1995_2009) ## [1] TRUE FALSE FALSE FALSE FALSE FALSE 3.2 network Personally, I find that the igraph package has more limited statistical functionality than network package (and its associated statnet suite of packes), so I prefer network objects. We initialize a network object with the network function (network really needs to get more creative in its naming approaches). Just like with igraph, for our one-mode network we will use our projected edges and mode one nodes. For our two-mode network we can use our full edge and node lists. Note: You’ll often see folks converting igraphs to network objects using the intergraph package. library(intergraph) net1_convert &lt;- asNetwork(g1) net1_convert ## Network attributes: ## vertices = 139 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 475 ## missing edges= 0 ## non-missing edges= 475 ## ## Vertex attribute names: ## mode url vertex.names ## ## Edge attribute names: ## before_1980 Y1980_1994 Y1995_2009 Y2010_2024 This conversion function can be very useful, but be sure to double check your work. Right now, with a relatively simple network (undirected and unweighted) the conversion works fine, but in other cases the default settings may require some attention. Because of this, personally I like to generate network objects directly from my edge and node lists. Within the network package we can use the network function and read in our edge lists (as the x argument), vertices, and specify features of the network such as whether or not it is directed or bipartite. net1 &lt;- network(x = edges_1mode, vertices = nodes_1mode, bipartite = F, directed = F) net2 &lt;- network(x = edges_2mode, vertices = nodes_2mode, bipartite = T, directed = F) When we print out a network object we get a different-looking summary, but it generally carries the same information: net1 ## Network attributes: ## vertices = 139 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 475 ## missing edges= 0 ## non-missing edges= 475 ## ## Vertex attribute names: ## mode name url vertex.names ## ## Edge attribute names: ## before_1980 Y1980_1994 Y1995_2009 Y2010_2024 net2 ## Network attributes: ## vertices = 435 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = 138 ## total edges= 680 ## missing edges= 0 ## non-missing edges= 680 ## ## Vertex attribute names: ## enddate funding_org funds id_numeric mgmt_Environmentalconditions mgmt_Floodriskandlandusemanagement mgmt_Governance mgmt_Habitatmanagement mgmt_Invasivenonnativespeciesmanagement mgmt_Nativespeciesmanagement mgmt_Waterquality mgmt_Watersupplymanagement mode n_years name sci_Amphibiansandreptiles sci_Aquaticvegetation sci_Biologicalresourceuse sci_Channelizedhabitats sci_Environmentalconditions sci_Fish sci_Floodplain sci_Foodwebs sci_Habitatchanges sci_Hydrologicchanges sci_Hydrologyandhydrodynamics sci_Invasivenonnativespecies sci_Invertebrates sci_Landuseandhumanactivities sci_Mammals sci_Nutrientsenergyandfoodweb sci_Riparianhabitats sci_Sediment sci_Species sci_Terrestrialhabitats sci_Tidalwetlands sci_Waterquality sci_Weatherandclimate startdate trunc_name url vertex.names ## ## Edge attribute names: ## contribution leadership org_id_numeric project_id_numeric The syntax for manipulating network objects is demonstrated below. We use the %v% and %e% operators to call on either vertices or edges of our network, and then name the attribute in quotation marks tail(net2 %v% &#39;n_years&#39;) ## [1] 3 4 4 4 1 6 head(net1 %e% &#39;Y1995_2009&#39;) ## [1] TRUE FALSE FALSE FALSE FALSE FALSE To save yourself trouble in the long run, it may be best to consider your network type, what kinds of analyses and visualization you’d like to do, and select a network package to stick to for that. Because there are differences in how these objects interact with various network analytical functions and visualization tools, and how they are indexed (V()$ vs %v%), it is worthwhile to stay consistent. "],["plotting-packages.html", "4 Plotting packages 4.1 ggraph 4.2 Other packages and functions", " 4 Plotting packages 4.1 ggraph For this workshop we will use the ggraph package (and function) for network visualization, created by Thomas Lin Pedersen, who also happens to make ‘generative’ artwork in R. ggraph uses the same approach as the ggplot2 grammar of graphics. This means is has three core components: 1. (network) data, 2. aesthetic mappings, and 3. geometries, in this case edges and nodes. We can combine the ggraph() function with a geometry specific to networks, geom_node_point(), to see the nodes. Where this differs from more traditional ggplotting approaches using tabular data (e.g. data frames), network objects have built-in mapping coordinates, so we don’t need to specify a mapping. library(ggraph) ## Loading required package: ggplot2 ggraph(net1) + geom_node_point() ## Using &quot;stress&quot; as default layout Here we see that the node point geometry uses a default layout based on the ‘stress’ algorithm (more in the following section), plotting the node points as we see above. To connect these points, we can use a ‘edge link’ geometry, geom_edge_link(), which uses the network object’s built in x, y, xend, and yend variables for the edge data. ggraph(net1) + geom_node_point() + geom_edge_link() ## Using &quot;stress&quot; as default layout This will be the foundation what we build on, starting in the next section. 4.2 Other packages and functions There are several plotting packages out there, some of them work with different network objects and requiring different knowledge. Excellent overviews of some of them are provided in this post by Katya Ognyanova. I won’t need to repeat these, but it is worth seeing the basic representation and understanding how igraph vs. network objects look differently in them, by default. 4.2.1 plot() Base R plotting works with network and igraph objects, though their defaults for each object are different. plot(net1) plot(g1) 4.2.2 GGally::ggnet2() The ggnet2 function is also dynamic, but despite being housed as part of the GGally extension of the ggplot2 series it seems to function more like a base R plot. For this function, igraph and network objects look the same. GGally::ggnet2(net1) GGally::ggnet2(g1) 4.2.3 ggnetwork::ggnetwork() Very similar to ggraph and also an extension of the ggplot family is the ggnetwork function. This function integrates directly with ggplot2 and specifies the default coordinates of ggraph, but otherwise operates quite similarly. For this function, igraph and network objects look the same. library(ggplot2) library(ggnetwork) ggplot(net1, aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes() + geom_edges() ggplot(g1, aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes() + geom_edges() "],["one-mode-visualization-1.html", "5 One-mode visualization 5.1 Introduction 5.2 Guiding questions: 5.3 Getting started with ggraph 5.4 Longitudinal networks", " 5 One-mode visualization 5.1 Introduction 5.1.1 Preparing to work with network For the remainder of this tutorial are going to stick to working with the network package, even though the functions we will use for visualization are compatible with both objects. I propose using network objects because they are compatible with more advanced statistical analysis provided through the statnet suite of packages. igraph objects should also work with the ggraph function, but because the syntax for working with the objects is different, the code used to do that would need to change. To continue working with network objects and ggraph, we want to load in two more packages. The sna package provides us with several functions for calculating network statistics, and dplyr and magrittr are packages from that tidyverse that will help us streamline our plotting. library(sna) library(dplyr) library(magrittr) Because we will be using exclusively network objects, we want to detach igraph before we continue further. This is because there are several commonly-used network functions in both igraph and sna that mask one another. For instance: sna::degree() igraph::degree() The igraph degree function will work only on igraph objects and sna degree function will work only on network objects. To avoid confusion and masking in R, we are going to detach the igraph package and work only with network objects and compatible packages like sna. detach(&quot;package:igraph&quot;, unload = TRUE) 5.2 Guiding questions: To get started with visualization, let’s remind ourselves of our visualization goals and guiding questions. With our one-mode network, we want to know: What is the structure of the collaborative research network in the Delta? How have the Delta’s research collaborations changed over time? 5.3 Getting started with ggraph To introduce the basics of the ggraph package, we’re going to focus on our first question: What is the structure of the collaborative research network in the Delta? As described in the previous section, ggraph uses the same approach as the ggplot2 grammar of graphics. This means is has three core components: 1.) (network) data, 2.) aesthetic mappings, and 3.) geometries, in this case edges and nodes. As with any ggplot we can add a theme that suits the look of the figure, and ‘void’ themes are often suited for networks. ggraph(net1) + geom_node_point() + geom_edge_link() + theme_void() ## Using &quot;stress&quot; as default layout Note that there are some defaults at play here: The layout argument is set to = ‘auto’, which is the ‘stress’ layout The default aesthetic mapping for geom_node_point: x, y, which don’t need specified The default aesthetic mapping for geom_edges: x, y, xend, yend, which don’t need specified 5.3.1 Layouts First, let’s talk about layouts. Networks are typically laid out based on the algorithm you (or the package default) chooses. Layouts are a choice based on how you would like to present the network. Because networks are depicting actors and relationships in an two-dimensional space (x, y), there is no ‘right’ way to plot actors in space (unless, of course, you have actual spatial data associated with your nodes, in which case you could use a geospatial network mapping (e.g. flight route maps)). For scenarios without geospatial coordinates, network theorists have developed layout algorithms which define rules for calculating the x and y coordinates of the nodes. Many layout algorithms aim to represent networks so that strongly connected nodes are plotted in close proximity to one another, representing a ‘core’ and a ‘periphery’. There is an overview of ggraph‘s different layouts presented in this blog post, and descriptions of some of them in the ggraph vignette and documentation, under the layout_tbl_graph_... functions. The layout is selected with the ’layout’ argument within the ggraph function. Below we present our network with a few different layouts. Note that there is a whole world of plotting networks using different conceptualizations of nodes and edges. These conceptualizations of nodes and edges may be dependent on certain layout algorithms. For example, if working with a ‘tree’ based layout, which creates more of a hierarchical structure like a dendrogram, edges as lines may not be suited. Instead, you can specify different edges (e.g. diagonals). For the sake of this workshop we are sticking to more ‘traditional’ network visualization, so we will only be depicting nodes as points and edges as lines. You can also set a manual layout. Because layouts are just x and y coordinates of points defined by a certain algorithm, you can extract those coordinates using the create_layout() function from ggraph, and fix and/or manipulate those coordinates, if need be. We will deal with this more shortly. fixed_coord &lt;- create_layout(net1, layout = &#39;fr&#39;) head(fixed_coord[c(1:2,5)]) ## x y name ## 1 -10.3582823 0.6269689 Agricultural Coalitions: Landowners membership fees ## 2 2.3912230 1.0975265 Anchor QEA ## 3 -8.3744602 -4.1790223 Audubon Canyon Ranch ## 4 0.2279849 -2.6019089 Bachand and Associates ## 5 -7.1904394 8.1055097 BTS ## 6 2.6774555 -8.3683646 CalFish For our one-mode networks, we are going to use the ‘fr’ layout, which is the Fruchterman and Reingold (force-directed algorithm). This is a choice that helps place higher-degree nodes in the center, and low-degree and isolate nodes on the periphery. ggraph(net1, layout = &#39;fr&#39;) + geom_node_point() + geom_edge_link() + theme_void() 5.3.2 Aesthetics Now that we’ve chosen a layout, let’s start adding some aesthetic features. This process will look very much like aesthetic mapping in ggplot2: we can assign aesthetics like color, size, shape, etc. to both our edge and node geometries. Size by degree: One common approach for network visualization is to size nodes by their degree centrality. While more central nodes are already placed at the center of our layout’s algorithm, it can be helpful to also increase their size to communicate this point. To size by degree, we will want to create a degree variable as a node attribute using the degree function, and assign that attribute to our network data. net1 %v% &#39;degree&#39; &lt;- sna::degree(net1) Hint: if you get Error in degree(net1) : Not a graph object, double check that you have detached the igraph package! Color-blind friendly colors: We’d also like our nodes and edges to be colored differently than the default black, so we can set these colors to our geometries. Because the focus of these networks are on nodes, not edges, we can set our edges to a less pronounced color like grey, and select an accessible, color-blind friendly color palette to select a node color from. I personally like to use viridis: viridis::viridis(12) ## [1] &quot;#440154FF&quot; &quot;#482173FF&quot; &quot;#433E85FF&quot; &quot;#38598CFF&quot; &quot;#2D708EFF&quot; &quot;#25858EFF&quot; ## [7] &quot;#1E9B8AFF&quot; &quot;#2BB07FFF&quot; &quot;#51C56AFF&quot; &quot;#85D54AFF&quot; &quot;#C2DF23FF&quot; &quot;#FDE725FF&quot; The latest version of R studio lets us see these colors when we write them out in a script, so let’s do that, and assign these colors to an object named clrs. We will be referencing this vector as we start using the palette. clrs &lt;- c(&quot;#440154FF&quot;, &quot;#482173FF&quot;, &quot;#433E85FF&quot;, &quot;#38598CFF&quot;, &quot;#2D708EFF&quot;, &quot;#25858EFF&quot;, &quot;#1E9B8AFF&quot;, &quot;#2BB07FFF&quot;, &quot;#51C56AFF&quot;, &quot;#85D54AFF&quot;, &quot;#C2DF23FF&quot;, &quot;#FDE725FF&quot;) We can now integrate these three features: node size, edge color, and node color, into our plot. ggraph(net1, layout = &#39;fr&#39;) + geom_node_point(aes(size = degree), color = clrs[4]) + geom_edge_link(color = &quot;gray80&quot;) + theme_void() Notice how layer order matters (as as with ggplot2), and so by having edges layered on top of nodes, we are really hiding the nodes. Let’s try to switch this, but also include some alpha arguments to help increase transparency. ggraph(net1, layout = &#39;fr&#39;) + geom_edge_link(color = &quot;gray80&quot;) + geom_node_point(aes(size = degree), color = clrs[4], alpha = .7) + theme_void() We can also add labels and make thematic alterations to features like the legend, just like with ggplot2. ggraph(net1, layout = &#39;fr&#39;) + geom_edge_link(color = &quot;gray80&quot;) + geom_node_point(aes(size = degree), color = clrs[4], alpha = .7) + theme_void() + labs(title = &quot;Delta Science Collaborative Research Network&quot;) + theme(legend.position = &quot;none&quot;) Notice that with the ‘fr’ layout (and any other layout algorithm), the coordinates change a bit every time. This is because each time we create a visualization the algorithm is re-run, and there is variation in the exact calculation. You can set your seed (every time before you plot) to keep it consistent. 5.3.3 Node labels So far we are getting a clear shape of the network. But related to our first question about understanding network structure, we may want to understand who is central to collaboration. To better identify our nodes, let’s try to add some node text with geom_node_text(). Already, we have a variable that is the name of our vertices: head(net1 %v% &#39;name&#39;) ## [1] &quot;Agricultural Coalitions: Landowners membership fees&quot; ## [2] &quot;Anchor QEA&quot; ## [3] &quot;Audubon Canyon Ranch&quot; ## [4] &quot;Bachand and Associates&quot; ## [5] &quot;BTS&quot; ## [6] &quot;CalFish&quot; Let’s add this as a text geometry. ggraph(net1, layout = &#39;fr&#39;) + geom_edge_link(color = &quot;gray80&quot;) + geom_node_point(aes(size = degree), color = clrs[4], alpha = .7) + theme_void() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Delta Science Collaborative Research Network&quot;) + geom_node_text(aes(label = name), size = 3, color=&quot;black&quot;) Okay, a bit overwhelming. Instead, let’s be selective based on degree. Let’s say we want to take the top 5-degree nodes and label them. # Extract the network&#39;s degree values based on the order of degrees degs &lt;- (net1 %v% &#39;degree&#39;)[order(net1 %v% &#39;degree&#39;)] # Then identify the top 5 unique degree values topdegs &lt;- unique(rev(degs))[1:5] # Then create a network variable named labels and add the name only if a # node has the number of degrees in the &#39;top degrees&#39; net1 %v% &#39;labels&#39; &lt;- ifelse((net1 %v% &#39;degree&#39;) %in% topdegs, net1 %v% &#39;name&#39;, &#39;&#39;) Now we have a sparse label attribute. net1 %v% &#39;labels&#39; ## [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;CDFW&quot; &quot;&quot; ## [10] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;DWR&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [19] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [28] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [37] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [46] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [55] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [64] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [73] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [82] &quot;&quot; &quot;SFEI&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [91] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [100] &quot;&quot; &quot;&quot; &quot;USBR&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [109] &quot;&quot; &quot;&quot; &quot;USFWS&quot; &quot;&quot; &quot;USGS&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [118] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [127] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [136] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; We can use this labels attribute to make our figure more easily readable. ggraph(net1, layout = &#39;fr&#39;) + geom_edge_link(color = &quot;gray80&quot;) + geom_node_point(aes(size = degree), color = clrs[4], alpha = .7) + theme_void() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Delta Science Collaborative Research Network&quot;) + geom_node_text(aes(label = labels), size = 3) Almost. Let’s include a repel = T argument to make sure the text doesn’t overlap. ggraph(net1, layout = &#39;fr&#39;) + geom_edge_link(color = &quot;gray80&quot;) + geom_node_point(aes(size = degree), color = clrs[4], alpha = .7) + theme_void() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Delta Science Collaborative Research Network&quot;) + geom_node_text(aes(label = labels), size = 3, repel = T) So, what is the structure of the collaborative research network in the Delta? This network shows us the overall picture, and we can use summary statistics to fill in the gaps. Among the 139 organizations involved in scientific research in the Delta, there is a mean degree of 14, suggesting that organizations are involved with, on average, 14 other organizations (across one or more projects). The network is quite connected, as the main component includes 107 (77%) of the organizations, with 27 isolates, meaning that 27 organizations have not collaborated at all. Within that main component, the average path length is 2.3, meaning that on average an organization is less then 3 connections away from any other organization. At the center of the network are three federal agencies, the US Geological Survey (USGS), US Fish and Wildlife Service (USFWS), and US Bureau of Reclamation (USBR), two state agencies, California Department of Fish and Wildlife (CDFW) and California Department of Water Resources (DWR) one research institute, the San Francisco Estuary Institute (SFEI). Reveal: How to calculate network-level statistics with the sna package network.size(net1) ## [1] 139 mean(net1 %v% &#39;degree&#39;) ## [1] 13.66906 sum(component.largest(net1)) ## [1] 107 length(isolates(net1)) ## [1] 27 main_comp &lt;- component.largest(net1, result = &#39;graph&#39;) mean(geodist(main_comp)[[&#39;gdist&#39;]], na.rm = T) ## [1] 2.345008 5.3.4 Network plotting function Now that we’ve got that down as a base, I want to create this network visualization approach as a function so that we can move through other material a little more smoothly. Feel free to just copy this function – all we are doing is taking the code we previously wrote, and replacing the network name that we’ve been using, net1, with the generic argument for the network name, netname. netplot_function &lt;- function(netname){ p &lt;- ggraph(netname, layout = &#39;fr&#39;) + geom_edge_link(color = &quot;gray80&quot;) + geom_node_point(aes(size = degree), color = clrs[4], alpha = .7) + theme_void() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Delta Science Collaborative Research Network&quot;) + geom_node_text(aes(label = labels), size = 3, repel = T) return(p) } 5.3.5 Removing isolates Before we move too far along in our formatting of this figure, we may want to remove isolates. There are certainly occasions where we want to see isolates in our network, but other times we are interested in the main component. We can identify our isolates and then induce our subgraph with only the non-isolate nodes using the get.inducedSubgraph() function. isolates(net1) ## [1] 5 6 10 14 16 18 26 33 37 42 46 50 56 58 69 76 77 79 97 ## [20] 106 108 115 117 127 131 134 137 noiso &lt;- (1:network.size(net1))[-isolates(net1)] net1_noiso &lt;- get.inducedSubgraph(net1, noiso) Now we can see our network without isolates, and quickly use our new netplot_function: netplot_function(net1_noiso) 5.4 Longitudinal networks Lets now turn to think more deeply about edges with the second guiding question: How have the Delta’s research collaborations changed over time? So far we’ve been looking at all of the research collaborations in the DST database, which range from 1950 to more or less present day. But remember that our data have edge attributes based on when the collaborative project occurred, binned into 4 time periods: Before 1980, 1980-1994, 1995-2009, and 2010-2024 (including ongoing projects). net1 ## Network attributes: ## vertices = 139 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 475 ## missing edges= 0 ## non-missing edges= 475 ## ## Vertex attribute names: ## degree labels mode name url vertex.names ## ## Edge attribute names: ## before_1980 Y1980_1994 Y1995_2009 Y2010_2024 To visualize how our networks change over time we are going to be ‘inducing subgraphs’, which is a network phrase for taking slices of our network. Networks can be induced based on certain nodes, which we will experiment with when we look at two mode networks. But for this question we will be making subgraphs based on edge attributes. 5.4.1 Inducing subgraphs by edge attribute To induce our network based on edge attributes, we’ll want to identify which edges have those attributes. We can identify the edge ids for which each time category is equal to TRUE. We have these are four binary variables, rather than one attribute with four time categories, because organizations can collaborate on projects in more than one time period. # First, let&#39;s give these ids, which will become important later net1 %v% &#39;id&#39; &lt;- net1 %v% &#39;vertex.names&#39; # Get the edges for each time period t1 &lt;- which(net1 %e% &#39;before_1980&#39; == T) t2 &lt;- which(net1 %e% &#39;Y1980_1994&#39; == T) t3 &lt;- which(net1 %e% &#39;Y1995_2009&#39; == T) t4 &lt;- which(net1 %e% &#39;Y2010_2024&#39; == T) Now that we have our edge ids before each time period (t1 through t4), we can use the get.inducedSubgraph function and identify the edge ids that we’d like to keep in each network. # Induce subgraphs based on edges net1_t1 &lt;- get.inducedSubgraph(net1, eid = t1) net1_t2 &lt;- get.inducedSubgraph(net1, eid = t2) net1_t3 &lt;- get.inducedSubgraph(net1, eid = t3) net1_t4 &lt;- get.inducedSubgraph(net1, eid = t4) Now we have a slice of the network for each time period. Note that because we did not specify the vertex ids, these networks will include only the nodes that has connections for that time period, and it will not include isolates. For example, though our whole collaborative network has 139 nodes, the network from time period 2 has only 30. net1_t2 ## Network attributes: ## vertices = 30 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 98 ## missing edges= 0 ## non-missing edges= 98 ## ## Vertex attribute names: ## degree id labels mode name url vertex.names ## ## Edge attribute names: ## before_1980 Y1980_1994 Y1995_2009 Y2010_2024 With these induced networks, an important thing to notice is that the attributes assigned in the complete network remain. This is is less important for exogenous, fixed attributes like name, but is important for endogenous/structural attributes like degree. For example, we can check the degree of SFEI in two different networks against the whole network and see that the degree attribute has carried over, but that calcuation is no longer correct in the induced networks. (net1_t1 %v% &#39;degree&#39;)[(net1_t1 %v% &#39;name&#39; == &quot;SFEI&quot;)] ## [1] 60 (net1_t2 %v% &#39;degree&#39;)[(net1_t2 %v% &#39;name&#39; == &quot;SFEI&quot;)] ## [1] 60 (net1 %v% &#39;degree&#39;)[(net1 %v% &#39;name&#39; == &quot;SFEI&quot;)] ## [1] 60 We need to update/reassign any structural values that we calculated for the whole network so that they are accurate for each sub-network. net1_t1 %v% &#39;degree&#39; &lt;- degree(net1_t1) net1_t2 %v% &#39;degree&#39; &lt;- degree(net1_t2) net1_t3 %v% &#39;degree&#39; &lt;- degree(net1_t3) net1_t4 %v% &#39;degree&#39; &lt;- degree(net1_t4) Just as the degree attribute needed changed, we also need to change the the label attribute, which was assigned based on degree. We can write a function to do that to avoid repetition across each time period. label_top_degree &lt;- function(netname, n){ degs &lt;- (netname %v% &#39;degree&#39;)[order(netname %v% &#39;degree&#39;)] topdegs &lt;- unique(rev(degs))[1:n] labels &lt;- ifelse((netname %v% &#39;degree&#39;) %in% topdegs, netname %v% &#39;name&#39;, &#39;&#39;) return(labels) } net1_t1 %v% &#39;labels&#39; &lt;- label_top_degree(net1_t1, 5) net1_t2 %v% &#39;labels&#39; &lt;- label_top_degree(net1_t2, 5) net1_t3 %v% &#39;labels&#39; &lt;- label_top_degree(net1_t3, 5) net1_t4 %v% &#39;labels&#39; &lt;- label_top_degree(net1_t4, 5) Now that we’ve updated our attributes, let’s plot one of our subgraphs. We can use the netplot_function that we wrote in the Section 5.5. netplot_function(net1_t1) + labs(title = &quot;Collaborative network: Pre 1980&quot;) netplot_function(net1_t2) + labs(title = &quot;Collaborative network: 1980-1994&quot;) netplot_function(net1_t3) + labs(title = &quot;Collaborative network: 1995-2009&quot;) netplot_function(net1_t4) + labs(title = &quot;Collaborative network: 2010-2024&quot;) This is a start, but the visualization challenge here is that it is hard to really detect change because the layout changes every time. Remember, our layout algorithm wants to cluster densely connected nodes, and because those clusters shift across time periods (combined with the random element in the algorithmic calculation itself), the algorithm will move nodes to a new coordinate in each time period. To improve this visualization, then, we want nodes to be in the same position for each subgraph. So next we learn how to fix the coordinates of the nodes across multiple graphs. 5.4.2 Fixing coordinates With ggraph, we can fix coordinates by creating a layout table from our initial network. Let’s all set the same seed so that we can have the same coordinates across computers. Note that we created an ‘id’ variable earlier based on the vertex name to serve as unique identifiers in these layout tables. We’ll do that again for out no isolates network set.seed(26) net1_noiso %v% &#39;id&#39; &lt;- net1_noiso %v% &#39;vertex.names&#39; fixed_coord &lt;- create_layout(net1_noiso, layout = &#39;fr&#39;) head(fixed_coord[,c(1:8)]) ## x y degree id labels member_label membership mode ## 1 -4.525570 -9.489269 2 49590 1 1 ## 2 -3.393409 -1.165814 10 49592 1 1 ## 3 6.230619 -4.040640 2 49593 1 1 ## 4 -8.142122 1.745267 8 49594 1 1 ## 5 -2.001708 -3.333115 6 49601 1 1 ## 6 -2.796420 1.448559 88 49602 CDFW CDFW 2 1 With these coordinates fixed from our full plot, we can then apply those same coordinates for each subgraph. To do that, we’ll first create manual layouts for each subgraph. Next we will subset the relevant coordinates from the full coordinate list using the node ‘id’. # 1. Create a layout table for the subgraph coord_t1 &lt;- create_layout(net1_t1, layout = &#39;fr&#39;) # 2. Subset the relevant coordinates from the full layout table fixed_coord_t1 &lt;- fixed_coord[fixed_coord$id %in% coord_t1$id, c(&#39;x&#39;,&#39;y&#39;, &#39;id&#39;)] # 3. Assign the coord_t1$x &lt;- fixed_coord_t1$x coord_t1$y &lt;- fixed_coord_t1$y Instead of copying and pasting this over again, we’ll write a function to quickly assign the coordinates that we set as fixed to a given subgraph. To do that, we take the code we wrote above but generalize the network and fixed coordinate arguments to ‘netname’ and ‘fixed’. Then we can input any network name and any fixed coordinates, and set them all. assign_fixed_coords &lt;- function(netname, fixed){ coord_t &lt;- create_layout(netname, layout = &#39;fr&#39;) fixed_coord_t &lt;- fixed[fixed$id %in% coord_t$id, c(&#39;x&#39;,&#39;y&#39;)] coord_t$x &lt;- fixed_coord_t$x coord_t$y &lt;- fixed_coord_t$y return(coord_t) } coord_t1 &lt;- assign_fixed_coords(net1_t1, fixed_coord) coord_t2 &lt;- assign_fixed_coords(net1_t2, fixed_coord) coord_t3 &lt;- assign_fixed_coords(net1_t3, fixed_coord) coord_t4 &lt;- assign_fixed_coords(net1_t4, fixed_coord) Now we can feed these coordinates directly into the netplot_function and just add new labels. Notice that we can feed these layout data frames directly in to the function, as we would a network object. This is a great functionality of ggraph. netplot_function(coord_t1) + labs(title = &quot;Collaborative network: Pre 1980&quot;) netplot_function(coord_t2) + labs(title = &quot;Collaborative network: 1980-1994&quot;) netplot_function(coord_t3) + labs(title = &quot;Collaborative network: 1995-2009&quot;) netplot_function(coord_t4) + labs(title = &quot;Collaborative network: 2010-2024&quot;) Huh, we’re really close, but something is not quite right yet. Even though the point have the same coordinates, each version of the network does not take up the same amount of space. For example, the subgraph for the 4th time period includes University of Kansas, which is fixed at x = -8.3, so it is one of the left-most points on the network. However, University of Kansas is not included in the subgraph for the 1st time period, and the left-most node in this network is only positioned at x = -4.7. So our issue is that the x and y axis limits adjust based on the data we input. We can just that as one more layer, specifying the widest range of x and y values in the complete network: netplot_function(coord_t1) + labs(title = &quot;Collaborative network: Pre 1980&quot;) + xlim(c(-9,7)) + ylim(c(-10,6)) netplot_function(coord_t2) + labs(title = &quot;Collaborative network: 1980-1994&quot;) + xlim(c(-9,7)) + ylim(c(-10,6)) netplot_function(coord_t3) + labs(title = &quot;Collaborative network: 1995-2009&quot;) + xlim(c(-9,7)) + ylim(c(-10,6)) netplot_function(coord_t4) + labs(title = &quot;Collaborative network: 2010-2024&quot;) + xlim(c(-9,7)) + ylim(c(-10,6)) "],["two-mode-visualization-1.html", "6 Two-mode visualization 6.1 Guiding questions: 6.2 Representing two-mode networks 6.3 Climate projects", " 6 Two-mode visualization 6.1 Guiding questions: Next we’re going to shift to the two-mode network. That is, a network consisting of two distinctly different types of nodes, where ties are possible between (but not within) each node type. For our data, our two modes are research organizations and projects, where researchers are linked to projects based on their involvement, but in this case there is no link between projects or between researchers. With our two-mode network, we want to know: Across the Delta science projects, which have the largest number of collaborators? How do organizations’ activity differ across different scientific and management themes: climate, land use, governance, and flooding? We will be using approaches that are similar to one-mode networks, but there are some features that we will want to rethink given that there are differences given what we can calculate and what we want to communicate. 6.2 Representing two-mode networks Analytical approaches for two-mode networks are slightly different from one-mode networks given that there are unique structural limitations of two-mode networks. As we’ve discussed already, in two-mode networks there cannot be connections between nodes of the same mode. Because of this, many structural statistics that you can calculate are not directly transferable. We’ll start with the one-mode visualization approach that we’ve started with, then build on these to improve our representation of the two-mode features. 6.2.1 The one-mode approach With one-mode networks, we used sna::degree() function to calculate the number of connections per node, and we can apply this same function to our two-mode network, net2, then run through the functions we’ve made so far to create a plot: label_top_degree() and netplot_function(). net2 %v% &#39;degree&#39; &lt;- sna::degree(net2) net2 %v% &#39;labels&#39; &lt;- label_top_degree(net2, 5) netplot_function(net2) This is a fine start, but here we aren’t communicating anything about to two-modality of the data. Without any further specification, it just looks like a one-mode network with some central nodes. We could consider an important attribute in our data, mode, telling is which of those points are organizations (mode 1) and which are projects (mode 0). net2 %v% &#39;mode&#39; ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 ## [149] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [186] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [223] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [260] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [334] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [371] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [408] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 To account for mode in our visualization, we could start by adding an aesthetic feature to our visualization, changing the shape and color to be determined by mode. set.seed(21) ggraph(net2, layout = &#39;fr&#39;) + geom_edge_link(width = 0.5, alpha = 0.5, color = &quot;gray70&quot;) + geom_node_point(aes(size = degree, shape = factor(mode), color = factor(mode))) + theme_void() + scale_color_manual(values = clrs[c(7,11)]) + geom_node_text(aes(label = labels), size = 3, color=&quot;black&quot;) + labs(size = &quot;Degree&quot;, color = &quot;Mode&quot;, shape = &quot;Mode&quot;) So now we can see our modes, but there are a few things that are somewhat misrepresented when we use this approach: Degree size is skewed by the limitations of the mode. Meaning: due to the nature of how two-mode networks are structured, it is likely that one mode will be more represented than the other. For instance in this case, organizations can participate in multiple projects across time, but projects are limited to the participants involved in the one time span on the project. Because of this, we see that organizations are all highest-degree, and don’t know much about the projects that are highly collaborative. The layout of the network hides that within-mode connections are not possible. By using one of the more classical layout algorithms that try to limit distance and group similar nodes, it is hard to notice that no two yellow triangles are connected to one another, nor are there any connections between the purple circles. So let’s address each of these points. 6.2.2 Normalized degree in two-mode networks One way to adjust and compare degree between modes is to calculate normalized degree for each mode. We can do this using the bipartite package: #install.packages(&#39;bipartite&#39;) library(bipartite) ?bipartite::ND This function, designed to think of bipartite (two-mode) data as species on different trophic levels, takes a matrix and uses that to calculate normalized degree for each mode. degree_norm_bip &lt;- bipartite::ND(as.matrix(net2), normalised = T) The output has two measures of degree, one for rows (in this case called ‘lower’ because the package was designed to think about lower and higher trophic levels) and one for columns (‘higher’). Check which matches up. # &#39;lower&#39; is for for the rows, so in our case, organizations length(degree_norm_bip$lower) == length(unique(edges_2mode$org_id)) ## [1] TRUE # &#39;higher&#39; is for for the columns, so in our case, projects length(degree_norm_bip$higher) == length(unique(edges_2mode$project_id)) ## [1] TRUE Now, we want to assign this bipartite degree in accordance with that order. BUT, note that this function orders degree based on numeric order of id, so we want to make sure this matches with the order of nodes in our network. nd_output &lt;- c(degree_norm_bip$lower, degree_norm_bip$higher) table(net2 %v% &#39;vertex.names&#39; == as.numeric(names(nd_output))) ## ## TRUE ## 435 Looks good, so now let’s assign this new degree measure to our network. [NOTE: IS THIS DOING WHAT I EXPECT?] net2 %v% &#39;degree_norm_bip&#39; &lt;- nd_output # Note: normalizing the degree for the whole network vs. normalizing degree for # each mode is a different process summary((net2 %v% &#39;degree_norm_bip&#39;)[net2 %v% &#39;mode&#39; == 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.007246 0.007246 0.014493 0.016591 0.021739 0.086957 summary((net2 %v% &#39;degree_norm_bip&#39;)[net2 %v% &#39;mode&#39; == 1]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.003367 0.003367 0.003367 0.016591 0.010101 0.232323 Now, let’s assign labels but let’s pull out the labels for each mode specifically: degs_mode0 &lt;- (net2 %v% &#39;degree_norm_bip&#39;)[net2 %v% &#39;mode&#39; == 0] degs_mode0 &lt;- degs_mode0[order(degs_mode0)] topdegs_mode0 &lt;- unique(rev(degs_mode0))[1:2] degs_mode1 &lt;- (net2 %v% &#39;degree_norm_bip&#39;)[net2 %v% &#39;mode&#39; == 1] degs_mode1 &lt;- degs_mode1[order(degs_mode1)] topdegs_mode1 &lt;- unique(rev(degs_mode1))[1:2] net2 %v% &#39;labels_bip&#39; &lt;- ifelse((net2 %v% &#39;degree_norm_bip&#39;) %in% topdegs_mode0 &amp; net2 %v% &#39;mode&#39; == 0, net2 %v% &#39;name&#39;, ifelse((net2 %v% &#39;degree_norm_bip&#39;) %in% topdegs_mode1 &amp; net2 %v% &#39;mode&#39; == 1, net2 %v% &#39;name&#39;, &#39;&#39;)) Now we can size by our new node attribute, ‘degree_norm_bip’ and label the nodes by ‘labels_bip’. set.seed(21) ggraph(net2, layout = &#39;fr&#39;) + geom_edge_link(width = 0.5, alpha = 0.5, color = &quot;gray70&quot;) + geom_node_point(aes(size = net2 %v% &#39;degree_norm_bip&#39;, shape = factor(net2 %v% &#39;mode&#39;), color = factor(net2 %v% &#39;mode&#39;))) + theme_void() + scale_color_manual(values = clrs[c(7,11)]) + geom_node_text(aes(label = net2 %v% &#39;labels_bip&#39;), size = 2, color=&quot;black&quot;) + labs(size = &quot;Degree&quot;, color = &quot;Mode&quot;, shape = &quot;Mode&quot;) ### Bipartite layout Next, I want to reconsider layouts that help demonstrate the structural limitations between modes: that there can be no connections between projects or between collaborators. The ‘bipartite’ layout minimizes edge crossing and lines up modes next to one another. However, this layout requires a T/F ‘type’ variable to define the mode, so we can create that using our mode variable. net2 %v% &#39;type&#39; &lt;- ifelse(net2 %v% &#39;mode&#39; == 0, T, F) Now we can specify the layout to bipartite: ggraph(net2, layout = &#39;bipartite&#39;) + geom_edge_link(width = 0.5, alpha = 0.5, color = &quot;gray70&quot;) + geom_node_point(aes(size = net2 %v% &#39;degree_norm_bip&#39;, shape = factor(net2 %v% &#39;mode&#39;), color = factor(net2 %v% &#39;mode&#39;)), alpha = .75) + theme_void() + scale_color_manual(values = clrs[c(7,11)]) + geom_node_text(aes(label = net2 %v% &#39;labels_bip&#39;), size = 2, color=&quot;black&quot;, max.overlaps = Inf) + labs(size = &quot;Degree&quot;, color = &quot;Mode&quot;, shape = &quot;Mode&quot;) Add a guide: I only want one legend ggraph(net2, layout = &#39;bipartite&#39;) + geom_edge_link(width = 0.5, alpha = 0.5, color = &quot;gray70&quot;) + geom_node_point(aes(size = net2 %v% &#39;degree_norm_bip&#39;, shape = factor(net2 %v% &#39;mode&#39;), color = factor(net2 %v% &#39;mode&#39;)), alpha = .75) + theme_void() + scale_color_manual(values = clrs[c(7,11)]) + geom_node_text(aes(label = net2 %v% &#39;labels_bip&#39;), size = 2, color=&quot;black&quot;, repel = T, max.overlaps = Inf) + labs(color = &quot;Mode&quot;, shape = &quot;Mode&quot;) + guides(colour = &quot;legend&quot;, shape = &quot;legend&quot;, size = &quot;none&quot;) 6.3 Climate projects Lets now turn to think more about nodes with the second guiding question: How do organizations’ activity differ across different scientific and management themes: climate, land use, governance, and flooding? Where we previously induced subgraphs based on edge attributes, we now want to compare subgraphs based on node attributes. We have scientific and management themes attributes to different projects, and we can identify the nodes for which those attributes are true. climate &lt;- which(net2 %v% &#39;sci_Weatherandclimate&#39; == T) landuse &lt;- which(net2 %v% &#39;sci_Landuseandhumanactivities&#39; == T) govnc &lt;- which(net2 %v% &#39;mgmt_Governance&#39; == T) flood &lt;- which(net2 %v% &#39;mgmt_Floodriskandlandusemanagement&#39; == T) head(climate) ## [1] 155 189 365 390 391 397 However, we only have this attribute for nodes in the project mode, which means that the induced network will have zero edges – it is not possible for projects to have ties to one another, but if we create a network using nodes only with that attribute, we only can identify projects. net2_cli &lt;- network::get.inducedSubgraph(net2, v = climate) net2_cli ## Network attributes: ## vertices = 9 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = 0 ## total edges= 0 ## missing edges= 0 ## non-missing edges= 0 ## ## Vertex attribute names: ## degree degree_norm_bip enddate funding_org funds labels labels_bip mgmt_Environmentalconditions mgmt_Floodriskandlandusemanagement mgmt_Governance mgmt_Habitatmanagement mgmt_Invasivenonnativespeciesmanagement mgmt_Nativespeciesmanagement mgmt_Waterquality mgmt_Watersupplymanagement mode n_years name sci_Amphibiansandreptiles sci_Aquaticvegetation sci_Biologicalresourceuse sci_Channelizedhabitats sci_Environmentalconditions sci_Fish sci_Floodplain sci_Foodwebs sci_Habitatchanges sci_Hydrologicchanges sci_Hydrologyandhydrodynamics sci_Invasivenonnativespecies sci_Invertebrates sci_Landuseandhumanactivities sci_Mammals sci_Nutrientsenergyandfoodweb sci_Riparianhabitats sci_Sediment sci_Species sci_Terrestrialhabitats sci_Tidalwetlands sci_Waterquality sci_Weatherandclimate startdate trunc_name type url vertex.names ## ## No edge attributes So we also need to identify the organization alters related to the relevant projects. climate_alter_ids &lt;- edges_2mode$org_id[edges_2mode$project_id %in% (net2 %v% &#39;vertex.names&#39;)[climate]] landuse_alter_ids &lt;- edges_2mode$org_id[edges_2mode$project_id %in% (net2 %v% &#39;vertex.names&#39;)[landuse]] govnc_alter_ids &lt;- edges_2mode$org_id[edges_2mode$project_id %in% (net2 %v% &#39;vertex.names&#39;)[govnc]] flood_alter_ids &lt;- edges_2mode$org_id[edges_2mode$project_id %in% (net2 %v% &#39;vertex.names&#39;)[flood]] This approach gets us nearly there. We have their actual ids, but when we induce a network we want to use their numeric representation in the network object, so we have to further extract that. climate_alters &lt;- which(net2 %v% &#39;vertex.names&#39; %in% climate_alter_ids) landuse_alters &lt;- which(net2 %v% &#39;vertex.names&#39; %in% landuse_alter_ids) govnc_alters &lt;- which(net2 %v% &#39;vertex.names&#39; %in% govnc_alter_ids) flood_alters &lt;- which(net2 %v% &#39;vertex.names&#39; %in% flood_alter_ids) Now we have the ego’s location in the network, which we can set to our v argument, and their alter’s location in the network, which we can set to our alter argument. net2_cli &lt;- network::get.inducedSubgraph(net2, v = climate, alters = climate_alters) net2_landuse &lt;- network::get.inducedSubgraph(net2, v = landuse, alters = landuse_alters) net2_govnc &lt;- network::get.inducedSubgraph(net2, v = govnc, alters = govnc_alters) net2_flood &lt;- network::get.inducedSubgraph(net2, v = flood, alters = flood_alters) Next, let’s assign the appropriate high-degree labels to each of these. To make this a bit easier on ourselves, let’s create a function first, using the steps we learned above. assign_bipartite_deg_labels &lt;- function(netname, n){ degree_norm_bip &lt;- bipartite::ND(as.matrix(netname)) nd_output &lt;- c(degree_norm_bip$higher, degree_norm_bip$lower) nd_output_df &lt;- data.frame(&#39;degreeN&#39; = nd_output, &#39;id&#39; = names(nd_output)) nd_output_sorted &lt;- nd_output_df[match((netname %v% &#39;vertex.names&#39;), nd_output_df $id),] netname %v% &#39;degree_norm_bip&#39; &lt;- nd_output_sorted$degreeN degs_mode0 &lt;- (netname %v% &#39;degree_norm_bip&#39;)[netname %v% &#39;mode&#39; == 0] degs_mode0 &lt;- degs_mode0[order(degs_mode0)] topdegs_mode0 &lt;- unique(rev(degs_mode0))[1:n] degs_mode1 &lt;- (netname %v% &#39;degree_norm_bip&#39;)[netname %v% &#39;mode&#39; == 1] degs_mode1 &lt;- degs_mode1[order(degs_mode1)] topdegs_mode1 &lt;- unique(rev(degs_mode1))[1:n] netname %v% &#39;labels_bip&#39; &lt;- ifelse((netname %v% &#39;degree_norm_bip&#39;) %in% topdegs_mode0 &amp; netname %v% &#39;mode&#39; == 0, netname %v% &#39;name&#39;, ifelse((netname %v% &#39;degree_norm_bip&#39;) %in% topdegs_mode1 &amp; netname %v% &#39;mode&#39; == 1, netname %v% &#39;name&#39;, &#39;&#39;)) return(netname) } Now we can apply this function to each of our subnetworks. net2_cli &lt;- assign_bipartite_deg_labels(net2_cli, 2) net2_landuse &lt;- assign_bipartite_deg_labels(net2_landuse, 2) net2_govnc &lt;- assign_bipartite_deg_labels(net2_govnc, 2) net2_flood &lt;- assign_bipartite_deg_labels(net2_flood, 2) Last, we want to plot them. Again however, it can streamline our process to use our previous code and turn it into a function to apply to all of our subnetworks. plot_bipartite_fx &lt;- function(netname){ p &lt;- ggraph(netname, layout = &#39;bipartite&#39;) + geom_edge_link(width = 0.5, alpha = 0.5, color = &quot;gray70&quot;) + geom_node_point(aes(size = netname %v% &#39;degree_norm_bip&#39;, shape = factor(netname %v% &#39;mode&#39;), color = factor(netname %v% &#39;mode&#39;)), alpha = .75) + theme_void() + scale_color_manual(values = clrs[c(7,11)]) + geom_node_text(aes(label = netname %v% &#39;labels_bip&#39;), size = 2, color=&quot;black&quot;) + labs(color = &quot;Mode&quot;, shape = &quot;Mode&quot;) + guides(colour = &quot;legend&quot;, shape = &quot;legend&quot;, size = &quot;none&quot;) return(p) } plot_bipartite_fx(net2_cli) + labs(title = &quot;Scientific theme: Climate&quot;) plot_bipartite_fx(net2_landuse) + labs(title = &quot;Scientific theme: Land use&quot;) plot_bipartite_fx(net2_govnc) + labs(title = &quot;Management theme: Governance&quot;) plot_bipartite_fx(net2_flood) + labs(title = &quot;Management theme: Flooding&quot;) "],["additional-resources.html", "7 Additional resources", " 7 Additional resources Network visualization online tutorials Kateto Interactive plotting packages D3 ggplotly wrapper p1 &lt;- subplot_viz_fixed(fixed_coord, net1) + labs(title = &quot;Collaborative network: 1950-2022&quot;) + theme(text= element_text(size=10, family=&quot;Times&quot;)) plotly::ggplotly(p1) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
